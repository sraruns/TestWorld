package com.in28minutes.springboot.controller;

import java.util.Arrays;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.mockito.Mockito;
import org.skyscreamer.jsonassert.JSONAssert;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.test.autoconfigure.web.servlet.WebMvcTest;
import org.springframework.boot.test.mock.mockito.MockBean;
import org.springframework.http.MediaType;
import org.springframework.test.context.junit4.SpringRunner;
import org.springframework.test.web.servlet.MockMvc;
import org.springframework.test.web.servlet.MvcResult;
import org.springframework.test.web.servlet.RequestBuilder;
import org.springframework.test.web.servlet.request.MockMvcRequestBuilders;

import com.n26.Transaction;
import com.n26.TransactionService;

@RunWith(SpringRunner.class)
@WebMvcTest(value = TransactionController.class, secure = false)
public class TransactionControllerTest {

	@Autowired
	private MockMvc mockMvc;

	@MockBean
	private TransactionService transactionService;

	ConcurrentMap<LocalDateTime, String> transactionMap = new ConcurrentHashMap<LocalDateTime, String>();
  transactionmap.put("",100);
  transactionmap.put("",200);
  transactionmap.put("",300);
  	
  String sampleTransaction = "{\"amount\":\"500\",\"timestamp\":\"2018-09-05\"}";
  
	@Test
	public void getStatistics() throws Exception {

		Mockito.when(transactionService.getStatistics().thenReturn(transactionMap);

		RequestBuilder requestBuilder = MockMvcRequestBuilders.get("/statistics").accept(MediaType.APPLICATION_JSON);

		MvcResult result = mockMvc.perform(requestBuilder).andReturn();

		System.out.println(result.getResponse());
		String expected = "{sum:600,avg:200,max:300,min:100,count:3}";

		JSONAssert.assertEquals(expected, result.getResponse().getContentAsString(), true);
	}

@Test
	public void addTransactions() throws Exception {
		
		Mockito.when(
				transactionService.addTransaction(Mockito.anyString(),
						Mockito.any(Course.class))).thenReturn(true);

		
		RequestBuilder requestBuilder = MockMvcRequestBuilders
				.post("/transactions")
				.accept(MediaType.APPLICATION_JSON).content(sampleTransaction)
				.contentType(MediaType.APPLICATION_JSON);

		MvcResult result = mockMvc.perform(requestBuilder).andReturn();

		MockHttpServletResponse response = result.getResponse();

		assertEquals(HttpStatus.CREATED.value(), response.getStatus(),true);


	}
}
